-> Learning Management System

    -> Idea : How to use classes, objects and methods

    -> Simulation of Grading and Payment System within LMS

        -> Grading - Student

        -> Payment - Trainer

    -> The project is designed to help us understand how classes work Together
        by defining methods and passing the data across the classes

    -> Student Module

        -> Student Info (ID, Name, Age etc)
        -> Attedance
        -> Performance Based On Score
        -> Trainer Rating
        -> etc

        -> Move Hover Like Functionality, which shows basic info like ID & Name

        -> Have Click Like FUnctionality, which shows complete info Like
            ID, Name, Age, Email, Mobile Number

        -> Ask Student for number of sessions attended

            -> 30 or more sessions attended add 5 Credits
            -> 20-29 sessions attended add 3 Credits
            -> below 20 sessions attended add 0 Credits

        -> Accept a score and based on score give Credits

            -> 85 and above score add 5 Credits
            -> 60-84 score add 3 Credits
            -> Below 60 score add 0 Credits

        -> Calculate final credits based on above

            -> 10 Credits give 1st
            -> 0-9 Credits give 2nd
            -> Below 0 give 3rd
    
    -> Trainer Module

        -> Trainer Info (ID, Name)

        -> Ask for number of sessions taken by Trainer

        -> Calculate payment for taking sessions, per session 2000

        -> Ask Student Rating for Trainer (1-5)

            -> Rating is 5 : Give 5000 bonus
            -> Otherwise : Give 0 bonus

        -> Calculate Total Payment For Sessions

    -> 3 months later new requirement

        -> Calculate Course Fee Functionality

            -> Actual Course Fee is 3000

            -> Student can give COUPON for discount on Course Fee

                -> if COUPON is "PROMO" give 5000 discount

                -> if COUPON if "FIFTY" give 15000 discount
            
            -> Also apply some Global Site Wide Discount - 10%

        -> Based On Above Functionality Display

            -> Original Course Fee

            -> Discount Applied Via COUPON

            -> Global Discount

            -> Final Course Fee To Pay

        -> Based on the system observation till now, see if calculations info data 
            is needed as instance members and optimize if required

        -> Our old def Performance_credits_cal() is more of harcoded

            -> Change it to be more dynamic

                -> Take some complex data structure to take multiple scores
                    from the student like in our crud app
                        (Enter Score or type done: ")

                -> From this multiple scores take the average and this value should
                    be given to performance_credits_cal(average) 